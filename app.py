# --- BIBLIOTH√àQUES N√âCESSAIRES ---
import streamlit as st
from openai import OpenAI
import PyPDF2
import json
import io
import time
import traceback # Pour un meilleur d√©bogage

# --- CONFIGURATION DE LA PAGE ---
st.set_page_config(
    page_title="RH+ Pro | Analyse Multi-CV",
    page_icon="üöÄ",
    layout="wide"
)

# --- FONCTIONS CL√âS ---

def extract_text_from_pdf(file_object):
    """Extrait le texte d'un objet fichier PDF."""
    try:
        pdf_reader = PyPDF2.PdfReader(file_object)
        text = "".join(page.extract_text() for page in pdf_reader.pages if page.extract_text())
        return text
    except Exception:
        return None

# --- MODIFICATION MAJEURE : ANALYSE D'UN SEUL CV √Ä LA FOIS ---
def get_single_cv_analysis(cv_text, filename, job_description_text):
    """
    Envoie UN SEUL CV √† l'API pour analyse et retourne un objet JSON pour ce candidat.
    """
    try:
        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=st.secrets["OPENROUTER_API_KEY"],
            # CORRECTION : Augmentation du d√©lai d'attente √† 3 minutes
            timeout=180.0 
        )
        
        prompt = f"""
        En tant qu'expert en recrutement IA, votre mission est d'analyser le CV suivant par rapport √† une description de poste et de renvoyer une analyse structur√©e en JSON.

        DESCRIPTION DU POSTE :
        ---
        {job_description_text}
        ---

        CV DU CANDIDAT (nom du fichier: {filename}):
        ---
        {cv_text}
        ---

        INSTRUCTIONS STRICTES :
        1. Analysez le CV fourni.
        2. D√©terminez un score de compatibilit√© global sur 100.
        3. Extrayez le nom complet du candidat.
        4. R√©digez un r√©sum√© tr√®s court (2 lignes max) du profil.
        5. Listez les 3 points forts principaux qui correspondent √† l'offre.
        6. Renvoyez votre analyse sous la forme d'un unique objet JSON. N'ajoutez AUCUN autre texte ou "```json".

        Exemple de sortie attendue :
        {{
            "nom_fichier": "{filename}",
            "nom": "Jean Dupont",
            "score": 85,
            "resume": "Profil technique solide avec 5 ans d'exp√©rience...",
            "points_forts": [
                "Ma√Ætrise de Python et Django.",
                "Exp√©rience en gestion de projet.",
                "Bonne connaissance des bases de donn√©es SQL."
            ]
        }}
        """

        response = client.chat.completions.create(
            # CORRECTION : Changement pour un mod√®le plus rapide et fiable
            model="mistralai/mistral-7b-instruct:free", 
            messages=[{"role": "user", "content": prompt}],
        )
        
        if response.choices and response.choices[0].message.content:
            raw_response = response.choices[0].message.content.strip()
            try:
                # Nettoyage au cas o√π l'IA ajoute quand m√™me les marqueurs
                if raw_response.startswith("```json"):
                    raw_response = raw_response[7:-3].strip()
                return json.loads(raw_response)
            except json.JSONDecodeError:
                st.error(f"L'IA a retourn√© un format invalide pour {filename}. R√©ponse :")
                st.code(raw_response)
                return None
        else:
            return None

    except Exception as e:
        # Affiche l'erreur (ex: Timeout)
        st.error(f"Erreur d'API lors de l'analyse de {filename}: {e}")
        traceback.print_exc() # Imprime l'erreur compl√®te dans les logs de Streamlit
        return None

# --- INTERFACE UTILISATEUR (UI) ---
st.title("üöÄ RH+ Pro")
st.markdown("Optimisez votre pr√©s√©lection. Chargez plusieurs CV, analysez-les en quelques secondes et identifiez les meilleurs talents.")
st.markdown("---")

st.subheader("1. Description du Poste")
job_description = st.text_area("Collez ici l'offre d'emploi compl√®te", height=250, label_visibility="collapsed")

st.subheader("2. CV des Candidats")
uploaded_files = st.file_uploader(
    "Chargez un ou plusieurs CV au format PDF",
    type="pdf",
    accept_multiple_files=True,
    label_visibility="collapsed"
)

st.markdown("")
analyze_button = st.button("Analyser les Candidatures", type="primary", use_container_width=True)
st.markdown("---")

# --- LOGIQUE DE TRAITEMENT ET AFFICHAGE DES R√âSULTATS (AM√âLIOR√âE) ---
if analyze_button:
    if not job_description.strip():
        st.warning("‚ö†Ô∏è Veuillez fournir une description de poste.")
    elif not uploaded_files:
        st.warning("‚ö†Ô∏è Veuillez charger au moins un CV.")
    else:
        all_results = []
        file_contents = {}
        
        progress_bar = st.progress(0, text="Initialisation de l'analyse...")
        
        for i, uploaded_file in enumerate(uploaded_files):
            progress_text = f"Analyse de {uploaded_file.name} ({i+1}/{len(uploaded_files)})..."
            progress_bar.progress((i + 1) / len(uploaded_files), text=progress_text)
            
            # Stockage du contenu avant tout
            file_contents[uploaded_file.name] = uploaded_file.getvalue()
            text = extract_text_from_pdf(io.BytesIO(file_contents[uploaded_file.name]))
            
            if text:
                single_result = get_single_cv_analysis(text, uploaded_file.name, job_description)
                if single_result:
                    all_results.append(single_result)
                else:
                    st.warning(f"L'analyse du fichier {uploaded_file.name} a √©chou√©. Passage au suivant.")
            else:
                 st.warning(f"Impossible d'extraire le texte de {uploaded_file.name}. Fichier ignor√©.")
        
        progress_bar.empty()

        if all_results:
            st.subheader("üèÜ Classement des Meilleurs Profils")
            
            sorted_results = sorted(all_results, key=lambda x: x.get('score', 0), reverse=True)
            
            # CORRECTION : Ajout de 'i' pour une cl√© unique
            for i, candidate in enumerate(sorted_results): 
                score = candidate.get('score', 0)
                badge_icon = "ü•á" if score >= 85 else "ü•à" if score >= 70 else "ü•â"

                with st.container(border=True):
                    col1, col2 = st.columns([4, 1])
                    with col1:
                        st.markdown(f"### {badge_icon} {candidate.get('nom', 'N/A')} ({candidate.get('nom_fichier', 'N/A')})")
                        st.markdown(f"**R√©sum√© :** {candidate.get('resume', 'N/A')}")
                        st.markdown("**Points forts pour ce poste :**")
                        points_forts = candidate.get('points_forts', ['Aucun identifi√©.'])
                        for point in points_forts:
                            st.markdown(f"- {point}")

                    with col2:
                        st.metric(label="Score", value=f"{score}%")
                        original_filename = candidate.get('nom_fichier')
                        if original_filename and original_filename in file_contents:
                            st.download_button(
                                label="üìÑ T√©l√©charger le CV",
                                data=file_contents[original_filename],
                                file_name=original_filename,
                                mime="application/pdf",
                                # CORRECTION : Cl√© unique pour √©viter les erreurs
                                key=f"btn_{original_filename}_{i}" 
                            )
        else:
            st.error("L'analyse a √©chou√© pour tous les CV fournis. L'IA n'a pas pu retourner de classement.")