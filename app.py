# --- BIBLIOTH√àQUES N√âCESSAIRES ---
import streamlit as st
from openai import OpenAI
import PyPDF2
import json
import io # Importation n√©cessaire pour les t√©l√©chargements

# --- CONFIGURATION DE LA PAGE ---
# On change le titre et l'ic√¥ne de la page
st.set_page_config(
    page_title="RH+ Pro | Analyse Multi-CV",
    page_icon="üöÄ",
    layout="wide"
)

# --- FONCTIONS CL√âS ---

def extract_text_from_pdf(file_object):
    """Extrait le texte d'un objet fichier PDF."""
    try:
        pdf_reader = PyPDF2.PdfReader(file_object)
        # Correction : s'assurer que le texte n'est pas None avant de joindre
        text = "".join(page.extract_text() for page in pdf_reader.pages if page.extract_text())
        return text
    except Exception:
        # Simplification de la gestion d'erreur
        return None

def get_multi_cv_analysis(cv_data_list, job_description_text):
    """
    Envoie une liste de CV √† l'API OpenRouter pour une analyse et un classement.
    """
    try:
        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=st.secrets["OPENROUTER_API_KEY"],
        )
        
        # Le prompt est maintenant con√ßu pour g√©rer plusieurs CV et renvoyer une structure JSON
        prompt = f"""
        En tant qu'expert en recrutement IA, votre mission est d'analyser une liste de CV par rapport √† une description de poste.
        Vous devez √©valuer chaque candidat, extraire leurs informations cl√©s, leur attribuer un score de compatibilit√©, et les classer.

        DESCRIPTION DU POSTE :
        ---
        {job_description_text}
        ---

        LISTE DES CV (nom de fichier et contenu) :
        ---
        {json.dumps(cv_data_list, indent=2)}
        ---

        INSTRUCTIONS STRICTES :
        1. Analysez chaque CV de la liste fournie. Utilisez le "nom_fichier" pour identifier le CV dans votre analyse.
        2. Pour chaque CV, d√©terminez un score de compatibilit√© global sur 100.
        3. Extrayez le nom complet du candidat (si possible, sinon utilisez le nom du fichier).
        4. R√©digez un r√©sum√© tr√®s court (2 lignes max) du profil.
        5. Listez les 3 points forts principaux qui correspondent √† l'offre.
        6. Renvoyez votre analyse sous la forme d'un unique objet JSON. N'ajoutez AUCUN autre texte ou explication.
        7. Le JSON doit √™tre une liste d'objets, o√π chaque objet repr√©sente un candidat et contient les cl√©s suivantes : "nom_fichier", "nom", "score", "resume", "points_forts".
        8. Classez les candidats dans la liste JSON du score le plus √©lev√© au plus bas.

        Exemple de format de sortie JSON attendu :
        [
          {{
            "nom_fichier": "cv_jean_dupont.pdf",
            "nom": "Jean Dupont",
            "score": 92,
            "resume": "D√©veloppeur Full-Stack avec 5 ans d'exp√©rience sur Python et React. Sp√©cialis√© dans les applications SaaS.",
            "points_forts": [
              "Excellente ma√Ætrise de Python/Django requise pour le backend.",
              "Exp√©rience av√©r√©e en d√©veloppement front-end avec React.",
              "Participation √† des projets similaires dans le secteur du SaaS."
            ]
          }},
          {{
            "nom_fichier": "cv_marie_curie.pdf",
            "nom": "Marie Curie",
            "score": 85,
            "resume": "Ing√©nieure logicielle sp√©cialis√©e en data science. Comp√©tences solides en Python mais moins d'exp√©rience sur le front-end.",
            "points_forts": [
              "Ma√Ætrise approfondie de Python et de ses librairies data.",
              "Capacit√© √† g√©rer des projets complexes de A √† Z.",
              "Bonne compr√©hension des architectures logicielles."
            ]
          }}
        ]
        """

        response = client.chat.completions.create(
            model="google/gemma-2-9b-it:free",
            response_format={"type": "json_object"}, # On demande explicitement un JSON
            messages=[{"role": "user", "content": prompt}],
        )
        
        if response.choices and response.choices[0].message.content:
            json_response_str = response.choices[0].message.content
            if json_response_str.startswith("```json"):
                json_response_str = json_response_str[7:-3].strip()
            return json.loads(json_response_str)
        else:
            return None

    except Exception as e:
        st.error(f"Une erreur est survenue lors de l'appel √† l'API : {e}")
        return None

# --- INTERFACE UTILISATEUR (UI) AM√âLIOR√âE ---

# Titre et introduction
st.title("üöÄ RH+ Pro")
st.markdown("Optimisez votre pr√©s√©lection. Chargez plusieurs CV, analysez-les en quelques secondes et identifiez les meilleurs talents.")
st.markdown("---")

# Changement de la mise en page : plus de colonnes pour les inputs
st.subheader("1. Description du Poste")
job_description = st.text_area("Collez ici l'offre d'emploi compl√®te", height=250, label_visibility="collapsed")

# Changement ici : accept_multiple_files=True
st.subheader("2. CV des Candidats")
uploaded_files = st.file_uploader(
    "Chargez un ou plusieurs CV au format PDF",
    type="pdf",
    accept_multiple_files=True,
    label_visibility="collapsed"
)

# Bouton d'analyse
st.markdown("") # Espace
analyze_button = st.button("Analyser les Candidatures", type="primary", use_container_width=True)
st.markdown("---")

# --- LOGIQUE DE TRAITEMENT ET AFFICHAGE DES R√âSULTATS ---
if analyze_button:
    # V√©rification des inputs
    if not job_description.strip():
        st.warning("‚ö†Ô∏è Veuillez fournir une description de poste.")
    elif not uploaded_files: # V√©rifie si la liste n'est pas vide
        st.warning("‚ö†Ô∏è Veuillez charger au moins un CV.")
    else:
        with st.spinner("Analyse en cours... L'IA √©value et classe les profils..."):
            cv_data = []
            file_contents = {} # Dictionnaire pour stocker le contenu des fichiers
            
            # Boucle sur tous les fichiers charg√©s
            for uploaded_file in uploaded_files:
                text = extract_text_from_pdf(uploaded_file)
                if text:
                    cv_data.append({"nom_fichier": uploaded_file.name, "texte_cv": text})
                    # Stocker le contenu binaire pour le t√©l√©chargement
                    file_contents[uploaded_file.name] = uploaded_file.getvalue()
            
            if not cv_data:
                st.error("‚ùå Aucun texte n'a pu √™tre extrait des CV fournis. Assurez-vous qu'ils ne sont pas des images scann√©es.")
            else:
                # Appel de la nouvelle fonction d'analyse
                analysis_results = get_multi_cv_analysis(cv_data, job_description)

                if analysis_results:
                    st.subheader("üèÜ Classement des Meilleurs Profils")
                    
                    # Boucle pour afficher chaque candidat dans une carte
                    for i, candidate in enumerate(analysis_results):
                        # D√©finir la couleur du badge en fonction du score
                        score = candidate.get('score', 0) # Assurer qu'on a un score
                        if score >= 85:
                            badge_icon = "ü•á"
                        elif score >= 70:
                            badge_icon = "ü•à"
                        else:
                            badge_icon = "ü•â"

                        with st.container(border=True):
                            col1, col2 = st.columns([4, 1]) # Colonnes pour la mise en page de la carte
                            with col1:
                                st.markdown(f"### {badge_icon} {candidate.get('nom', 'N/A')} ({candidate.get('nom_fichier', 'N/A')})")
                                st.markdown(f"**R√©sum√© du profil :** {candidate.get('resume', 'N/A')}")
                                st.markdown("**Points forts pour ce poste :**")
                                points_forts = candidate.get('points_forts', ['Aucun point fort sp√©cifique identifi√©.'])
                                for point in points_forts:
                                    st.markdown(f"- {point}")

                            with col2:
                                st.metric(label="Score d'Alignement", value=f"{score}%")
                                # Ajout du bouton de t√©l√©chargement
                                original_filename = candidate.get('nom_fichier')
                                if original_filename and original_filename in file_contents:
                                    st.download_button(
                                        label="üìÑ T√©l√©charger le CV",
                                        data=file_contents[original_filename],
                                        file_name=original_filename,
                                        mime="application/pdf",
                                    )
                else:
                    st.error("L'analyse a √©chou√©. L'IA n'a pas pu retourner un classement.")